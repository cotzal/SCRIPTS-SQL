SET NOCOUNT ON
-- PARAMETROS
DECLARE @NUMERO_FICHEROS INT = 8
DECLARE @FECHA_FINAL DATETIME = '01/01/2025'
declare @ejercicio_referencia varchar(4)= '2023'
DECLARE @EJERCICIO_TRATAR VARCHAR(4) = '2024'
DECLARE @MARGEN_INCREMENTO INT = 20
DECLARE @BDD VARCHAR(25) = 'COMERCIA_AGR'
DECLARE @FICBDD CHAR(3) = RIGHT(@BDD,3)
DECLARE @UBICACION VARCHAR(255) = 'C:\TEST\'
DECLARE @TAMANYOPREFIJADO INT = 10240 -- 0 SI SE DESEA CALCULAR SEGUN ESTADISITCA
DECLARE @DEBUG CHAR(1) = 'N'

-- DECLARACION DE VARIABLES
DECLARE @partitionFunction varchar(100), @schemaParticionado varchar(100)
DECLARE @FECHA_INICIO DATETIME
DECLARE @TAMANYOREFERENCIA BIGINT
DECLARE @TAMANYOFICHERO INT
DECLARE @TAMANYODIRARIO DECIMAL(12,2)
DECLARE @DIAS INT
DECLARE @TIPO_PARTICIONADO CHAR(1), @DIAS_PP INT, @SUFIJO CHAR(3), @TD CHAR(1), @ORDEN CHAR(1)
DECLARE @FFPARTICION DATETIME

-- resultados
DECLARE @CREACIONFG TABLE (COMMANDO VARCHAR(500))
DECLARE @CREACIONPA TABLE (COMMANDO VARCHAR(500))

-- CONFIGURACION DE TRATAMIENTO
DECLARE @TABLA_CNF TABLE (PF VARCHAR(100), TIPO CHAR(1), TD CHAR(1), DIAS_PP INT, BDD VARCHAR(25), CONTENIDO VARCHAR(100), SUFIJO CHAR(3), ORDEN CHAR(1))

/*
	PF - PARTITION FUNCTION
	TIPO - X (NO SE USA), M(MENSUAL) ,S(SEMESTRAL), A(ANUAL)
	TD - TIPO DE INTERVALOS X(NO SE USA), D(DIAS), M(MESES), A(ANÑOS)
	DIAS_PP - NUMERO DE INTERVALO ANTERIOR
	BDD - BASE DE DATOS
	CONTENIDO - DESCRIPCION
	SUFIJO - SUJIFO PARA PARTICION
	ORDEN - SI HAY MAS DE UN SUFIJO NUMERO DE ORDEN
*/

INSERT INTO @TABLA_CNF VALUES ('OPERACIONES_ANUAL',		'X','X',0,'COMERCIA_DWH', 'NADA'			,'XXX','0')
INSERT INTO @TABLA_CNF VALUES ('SALDOS_PARTICION',		'M','D',7,'COMERCIA_DWH','SALDOS DIARIOS'	,'SLD','0')
INSERT INTO @TABLA_CNF VALUES ('OPERACIONES_MENSUAL',	'M','D',7,'COMERCIA_DWH','OPERACIONES'		,'OPE','0')
INSERT INTO @TABLA_CNF VALUES ('TASAS_MENSUAL',			'M','D',7,'COMERCIA_DWH', 'TASAS'			,'TAS','0')
INSERT INTO @TABLA_CNF VALUES ('OPERACIONES_DENEGADAS',	'S','M',6,'COMERCIA_DWH', 'DENEGACIONES'	,'OPD','0')
INSERT INTO @TABLA_CNF VALUES ('SALDOS_M',				'M','M',1,'COMERCIA_DWH', 'SALDOS MENSUALES','SLM','0')
INSERT INTO @TABLA_CNF VALUES ('DATOS_DIARIOS_FN',		'M','M',1,'COMERCIA_DWH', 'DATOS VARIOS'	,'GDA','0')
INSERT INTO @TABLA_CNF VALUES ('BPI_PARTICION_ANUAL',	'S','M',6,'COMERCIA_DWH', 'BPI'				,'BPI','0')
INSERT INTO @TABLA_CNF VALUES ('F_CICLO_VIDA',			'M','M',1,'COMERCIA_DWH', 'OPERACIONES'		,'SCV','0')
INSERT INTO @TABLA_CNF VALUES ('INDICES_MENSUALES',		'M','M',1,'COMERCIA_DWH', 'IDX'				,'IDX','0')
INSERT INTO @TABLA_CNF VALUES ('COMERCIOS_ANUAL',		'A','A',1,'COMERCIA_DWH', 'MAE COMERCIOS'	,'COM','0')
INSERT INTO @TABLA_CNF VALUES ('BANKIA_PARTICION_MENSUAL','X','X',0,'COMERCIA_DWH', 'BANKIA'		,'XXX','0')
INSERT INTO @TABLA_CNF VALUES ('COMISIONES_ANUAL',	    'A','A',1,'COMERCIA_DWH', 'COMISIONES'		,'CMS','0')

INSERT INTO @TABLA_CNF VALUES ('DATOS_DESNORALIZADOS_F','M','M',1,'COMERCIA_AGR', 'DENEGADAS'		,'PBI','0')
INSERT INTO @TABLA_CNF VALUES ('DATPS_DESNORMALIZADOS_MES_F','X','X',1,'COMERCIA_AGR', 'NADA'		,'XXX','0')
INSERT INTO @TABLA_CNF VALUES ('OPERACIONES_DESNORMALIZADAS','M','D',5,'COMERCIA_AGR', 'OPERACIONES','OPE','0')
INSERT INTO @TABLA_CNF VALUES ('DATOS_ANUALES'              ,'X','X',1,'COMERCIA_AGR', 'NADA'		,'PBI','0')
INSERT INTO @TABLA_CNF VALUES ('AGREGADOS_MENSUALES'        ,'M','D',5,'COMERCIA_AGR', 'AGREGADOS'	,'AGR','0')
INSERT INTO @TABLA_CNF VALUES ('TMP_AGREGADO_FUC_MENSUAL'   ,'M','D',7,'COMERCIA_AGR', 'AGREGADOS'	,'TMP','0')

INSERT INTO @TABLA_CNF VALUES ('MENSUAL_RECURRENTE'		  ,'X','X',7,'COMERCIA_ODS', 'RECURRENTE'	,'OPF','0')

-- LISTA DE FILEGROUPS EXISTENTES PARA EVITAR DUPLICADOS
DECLARE @TABLEFG TABLE (FILEGROUP VARCHAR(50))

INSERT INTO @TABLEFG
SELECT NAME FROM
(
SELECT NAME FROM COMERCIA_DWH.SYS.filegroups 
UNION ALL 
SELECT NAME FROM COMERCIA_AGR.SYS.filegroups 
UNION ALL 
SELECT NAME FROM COMERCIA_ODS.SYS.filegroups ) AS T1

-- OBTENEMOS LA LISTA DE ESQUEMAS Y FUNCIONES DE PARTICIONADO
declare rse cursor for
		SELECT 
			pf.name AS PartitionFunction,
			ps.name
		FROM
			sys.partition_schemes ps join
			sys.partition_functions pf ON ps.function_id = pf.function_id

open rse

fetch next from rse into @partitionFunction, @schemaParticionado
while @@FETCH_STATUS  = 0
begin
	INSERT INTO @CREACIONPA VALUES  (' ******************************************* ' + @partitionFunction)
	if @debug = 's'
		print  @partitionFunction 

	if not exists(select * from  @TABLA_CNF where pf = @partitionFunction and  tipo = 'X')
	begin

		-- OBTENEMOS FINAL DE PARTICION ACTUAL
		SELECT @FECHA_INICIO = MAX(CAST(RIGHT_BOUNDARY AS DATE)) FROM ETL_PARTICIONES WHERE PARTITION_FUNCION = @partitionFunction

		-- CALCULAMOS TAMAÑO DE LAS ULTIMAS PARTICIONES POR DIA.

		-- OBTENEMOS EL ESPACIO TOTAL DEL PERIODO DE REFERENCIA
		SELECT @TAMANYOREFERENCIA = sum(convert(BIGINT,round(fileproperty(fl.name,'SpaceUsed')/128.000,0)))
		FROM 
			sys.filegroups fg
		JOIN 
			sys.master_files f ON fg.data_space_id = f.data_space_id
		join 
			sys.sysfiles fl on fl.fileid = f.file_id 
		LEFT JOIN 
			sys.destination_data_spaces dds ON fg.data_space_id = dds.data_space_id
		LEFT JOIN 
			sys.partition_schemes ps ON dds.partition_scheme_id = ps.data_space_id
		LEFT JOIN 
			sys.partition_functions pf ON ps.function_id = pf.function_id
		where pf.name = @partitionFunction and fg.name like '%' + @ejercicio_referencia + '%'

		-- CAMBIAR A KB
		--SET @TAMANYOREFERENCIA = @TAMANYOREFERENCIA * 1024

		-- DIAS QUE INTERVIENEN EN EL PERIODO DE REFERENCIA
		select @DIAS = datediff(day, min(CAST(left_BOUNDARY AS DATE)), isnull(MAX(CAST(RIGHT_BOUNDARY AS DATE)),@FECHA_FINAL)) from ETL_PARTICIONES where partition_funcion = @partitionFunction and file_group_name like '%' + @ejercicio_referencia + '%'
		if @dias > 365
			set @dias = 365

		SET @TAMANYODIRARIO = (@TAMANYOREFERENCIA + (@TAMANYOREFERENCIA * @MARGEN_INCREMENTO ) /100) / @DIAS 

		SELECT @partitionFunction, @TAMANYODIRARIO , @TAMANYOREFERENCIA, @DIAS

		SELECT @TIPO_PARTICIONADO = TIPO, @DIAS_PP = DIAS_PP, @SUFIJO = SUFIJO, @TD = TD, @ORDEN = ORDEN FROM @TABLA_CNF WHERE PF = @partitionFunction AND BDD = @BDD 
		IF @@ROWCOUNT = 0
		BEGIN
			PRINT @PARTITIONFUNCTION
			RAISERROR('CONFIGURACION DE ESQUEMA NO ENCONTRADO',16,1)
			RETURN
		END
		ELSE
		BEGIN

			-- DESCARTA LAS QUE NO HAY QUE HACER NADA
			IF @TIPO_PARTICIONADO <> 'X'
			BEGIN
				DECLARE @PREFIJO VARCHAR(50) 
				
				DECLARE @FECHAW DATETIME = @FECHA_INICIO

				-- PARA SEMESTRAL Y ANUAL LAS PARTICIONES SOL FECHA DIRECTAS
				if @tipo_particionado in ('S','A')
					SET @FECHAW = '01/01/' + @EJERCICIO_TRATAR 

				WHILE @FECHAW < @FECHA_FINAL 
				BEGIN
					IF @DEBUG = 'S'
						print 'FECHA PROCESO ' + CAST(@FECHAW AS VARCHAR(20))

					SET @PREFIJO = 'P' + @SUFIJO + '-N' + cast(YEAR(@FECHAW) as varchar(4)) + @TIPO_PARTICIONADO

					-- DEFINE NOMBRE DE FILEGROUP
					DECLARE @NAMEFG VARCHAR(50)
					IF @TIPO_PARTICIONADO = 'M'
						SET @NAMEFG = @PREFIJO + RIGHT('000' + CAST(MONTH(@FECHAW) AS VARCHAR(3)),3)
					IF @TIPO_PARTICIONADO = 'S'
					BEGIN
						IF MONTH(@FECHAW) < 7
							SET @NAMEFG = @PREFIJO + '001'
						ELSE
							SET @NAMEFG = @PREFIJO + '002'
					END
					if @TIPO_PARTICIONADO = 'A'
						SET @NAMEFG = @PREFIJO

					DECLARE @NORDEN INT = 0
					
					SELECT * FROM @TABLEFG WHERE FILEGROUP = REPLACE(@NAMEFG,'-',CAST(@NORDEN AS CHAR(1)))
					WHILE @@ROWCOUNT <> 0
					BEGIN
						SET @NORDEN = @NORDEN + 1
						SELECT * FROM @TABLEFG WHERE FILEGROUP = REPLACE(@NAMEFG,'-',CAST(@NORDEN AS CHAR(1)))
					END

					SET @NAMEFG = REPLACE(@NAMEFG,'-',CAST(@NORDEN AS CHAR(1)))
					INSERT INTO @TABLEFG VALUES (@NAMEFG)

					-- DEFINE FECHA FINAL DE PARTICION
					IF @TD = 'D'
					BEGIN
						SET @FFPARTICION = DATEADD(DAY,@DIAS_PP ,@FECHAW)						
					END
					IF @TD = 'M'
					BEGIN
						SET @FFPARTICION = DATEADD(MONTH,@DIAS_PP, @FECHAW)
					END
					IF @TD = 'A'
					BEGIN
						SET @FFPARTICION = DATEADD(YEAR,@DIAS_PP, @FECHAW)
					END

					-- CONTROLA LOS LIMITES DE ASIGNACION
					IF @TIPO_PARTICIONADO = 'M' AND (MONTH(@FECHAW) <> MONTH(@FFPARTICION))
					BEGIN
						SET @FFPARTICION = EOMONTH(@FECHAW)
					END
					IF @TIPO_PARTICIONADO = 'S' 
					BEGIN
						DECLARE @SEMESTRE INT, @SEMESTREF INT
						SELECT @SEMESTRE =  CASE 
								WHEN DATEPART(MONTH, @FECHAW) BETWEEN 1 AND 6 THEN 1
								WHEN DATEPART(MONTH, @FECHAW) BETWEEN 7 AND 12 THEN 2
							END,@SEMESTREF =  CASE 
								WHEN DATEPART(MONTH, @FFPARTICION) BETWEEN 1 AND 6 THEN 1
								WHEN DATEPART(MONTH, @FFPARTICION) BETWEEN 7 AND 12 THEN 2
							END
						IF @SEMESTRE <> @SEMESTREF
						BEGIN
							IF @SEMESTRE = 1
								SET @FFPARTICION = '30/06/' + cast(YEAR(@FECHAW) as varchar(4))
							IF @SEMESTRE = 2
								SET @FFPARTICION = '31/12/' + cast(YEAR(@FECHAW) as varchar(4))
						END
					END
					IF @TIPO_PARTICIONADO = 'A'  AND (YEAR(@FECHAW) <> YEAR(@FFPARTICION))
					BEGIN
						SET @FFPARTICION = '31/12/' +  cast(YEAR(@FECHAW) as varchar(4)) 
					END

					-- TAMAYO POR FICHERO
					DECLARE @DIASREALES INT
					SET @DIASREALES = DATEDIFF(DAY,@FECHAW,@FFPARTICION)
					SET @TAMANYOFICHERO = (@TAMANYODIRARIO * @DIASREALES) / @NUMERO_FICHEROS 

					-- CREA EL SCRIPT DE ADICION DE FILEGROUP
					DECLARE @CMD VARCHAR(500)
					SET @CMD = 'ALTER DATABASE [' + @BDD + + '] ADD FILEGROUP [' + @NAMEFG + ']'
					INSERT INTO @CREACIONFG VALUES ( @CMD)

					-- CREACION DE LOF FICHEOS
					DECLARE @IDX INT = 1
					WHILE @IDX <= @NUMERO_FICHEROS
					BEGIN
						DECLARE @FN VARCHAR(100) = @NAMEFG + '_' + @FICBDD + CAST(@IDX AS VARCHAR(2)) + '.mdf'

						-- SI EL TAMAÑO ESTA PREDEFINIDO ES ESE EL TAMAYO A IMPLEMENTAR
						IF @TAMANYOPREFIJADO <> 0
							SET @TAMANYOFICHERO = @TAMANYOPREFIJADO 

						SET @CMD = 	'ALTER DATABASE [' + @BDD + + '] ADD FILE (NAME = N''' + @FN + ''' , FILENAME = N''' + @UBICACION + @FN  + ''' , SIZE = ' + CAST(@TAMANYOFICHERO AS VARCHAR(20)) + ' , FILEGROWTH = 10%) TO FILEGROUP [' +  @NAMEFG + ']'	

						if @DEBUG = 'S'
							PRINT @CMD

						INSERT INTO @CREACIONFG VALUES (@CMD)
						SET @IDX = @IDX + 1
					END
					
					-- ESQUEMA DE PARTICIONADO
					DECLARE @SCHEMAMOD VARCHAR(500) = 'ALTER PARTITION SCHEME [' + @schemaParticionado + '] NEXT USED [' + @NAMEFG + ']'
					INSERT INTO @CREACIONPA VALUES (@SCHEMAMOD)

					IF @DEBUG = 'S'
						PRINT @SCHEMAMOD

					DECLARE @FUNCMOD VARCHAR(500) = 'ALTER PARTITION FUNCTION [' + @partitionFunction + ']() SPLIT RANGE (N''' + FORMAT(@FFPARTICION,'yyyy-MM-dd') +'T00:00:00.000'')'
					INSERT INTO @CREACIONPA VALUES (@FUNCMOD)

					IF @DEBUG = 'S'
						PRINT @FUNCMOD

					-- ACTUALIZA LA FECHA DE TRABAJO A LA ULTIMA DE LA PARTICION
					SET @FECHAW = DATEADD(DAY,1,@FFPARTICION )
				END

			
			END
		
		END
	end

	fetch next from rse into @partitionFunction, @schemaParticionado
end

close rse
deallocate rse

IF @DEBUG <> 'S'
BEGIN
	SELECT * FROM @CREACIONFG 
	SELECT * FROM @CREACIONPA
END